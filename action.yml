name: CI Dokumentor
description: Automatically generate documentation for CI/CD components like GitHub Actions and workflows
author: hoverkraft
branding:
  icon: book-open
  color: blue

inputs:
  source:
    description: Source manifest file path to handle (e.g. `action.yml`, `.github/workflows/ci.yml`).
    required: true
  destination:
    description: Destination path for generated documentation (optional; destination is auto-detected if not specified by the adapter).
    required: false
  repository:
    description: Repository platform (auto-detected if not specified).
    required: false
  cicd:
    description: CI/CD platform (github-actions, gitlab-ci, etc.).
    required: false
  include-sections:
    description: Comma-separated list of sections to include.
    required: false
  exclude-sections:
    description: Comma-separated list of sections to exclude.
    required: false
  dry-run:
    description: Whether to perform a dry run (no files are written).
    required: false
    default: 'false'
  version:
    description: Version to document (auto-detected if not specified).
    required: false
  extra-badges:
    description: JSON array of extra badges to include in the documentation. Each badge should have 'label', 'url', and optional 'linkUrl' properties.
    required: false
    default: ''
  github-token:
    description: The GitHub token used to fetch repository information.
    default: ${{ github.token }}
    required: false
  ci-dokumentor-version:
    description: Version of CI Dokumentor to use. See <https://github.com/hoverkraft-tech/ci-dokumentor/releases>.
    required: false
    default: latest

outputs:
  destination:
    description: Destination path for generated documentation.
    value: ${{ steps.generate.outputs.destination }}

runs:
  using: composite
  steps:
    - id: generate
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_SOURCE: ${{ inputs.source }}
        INPUT_DESTINATION: ${{ inputs.destination }}
        INPUT_REPOSITORY: ${{ inputs.repository }}
        INPUT_CICD: ${{ inputs.cicd }}
        INPUT_INCLUDE_SECTIONS: ${{ inputs.include-sections }}
        INPUT_EXCLUDE_SECTIONS: ${{ inputs.exclude-sections }}
        INPUT_DRY_RUN: ${{ inputs.dry-run }}
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_EXTRA_BADGES: ${{ inputs.extra-badges }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
        INPUT_CI_DOKUMENTOR_VERSION: ${{ inputs.ci-dokumentor-version }}
      run: |
        echo "::debug::Source path set to: $INPUT_SOURCE"
        envs="-e GITHUB_OUTPUT"
        # Build command as an array to preserve arguments containing spaces/newlines (e.g. multiline JSON)
        args=(generate --output-format "github-action" --source "$INPUT_SOURCE")

        if [ -n "$INPUT_DESTINATION" ]; then
          args+=(--destination "$INPUT_DESTINATION")
          echo "::debug::Destination path set to: $INPUT_DESTINATION"
        fi

        if [ -n "$INPUT_REPOSITORY" ]; then
          args+=(--repository "$INPUT_REPOSITORY")
          echo "::debug::Repository set to: $INPUT_REPOSITORY"
        fi

        if [ -n "$INPUT_CICD" ]; then
          args+=(--cicd "$INPUT_CICD")
          echo "::debug::CI/CD set to: $INPUT_CICD"
        fi

        if [ -n "$INPUT_INCLUDE_SECTIONS" ]; then
          args+=(--include-sections "$INPUT_INCLUDE_SECTIONS")
          echo "::debug::Include sections set to: $INPUT_INCLUDE_SECTIONS"
        fi

        if [ -n "$INPUT_EXCLUDE_SECTIONS" ]; then
          args+=(--exclude-sections "$INPUT_EXCLUDE_SECTIONS")
          echo "::debug::Exclude sections set to: $INPUT_EXCLUDE_SECTIONS"
        fi

        if [ "$INPUT_DRY_RUN" = "true" ]; then
          args+=(--dry-run)
          echo "::debug::Dry run enabled"
        fi

        if [ -n "$INPUT_EXTRA_BADGES" ]; then
          # Preserve the whole JSON value as a single argument
          args+=(--extra-badges "$INPUT_EXTRA_BADGES")
          echo "::debug::Extra badges set to: $INPUT_EXTRA_BADGES"
        fi

        echo "::debug::Args set to: ${args[*]}"

        if [ -n "$GITHUB_TOKEN" ]; then
          envs="$envs -e GITHUB_TOKEN"
          echo "::debug::GitHub token provided"
        fi

        echo "::debug::Env args set to: $envs"

        echo "::debug::CI Dokumentor version set to: $INPUT_CI_DOKUMENTOR_VERSION"

        docker run --rm \
          -v "$GITHUB_WORKSPACE:$GITHUB_WORKSPACE" \
          -v "$GITHUB_OUTPUT:$GITHUB_OUTPUT" \
          -u "$(id -u):$(id -g)" \
          -w "$GITHUB_WORKSPACE" \
          $envs \
          ghcr.io/hoverkraft-tech/ci-dokumentor/cli:$INPUT_CI_DOKUMENTOR_VERSION \
          "${args[@]}"
