import { RepositoryProvider } from '../../repository/repository.provider.js';
import { OptionDescriptor } from '../../options/options.js';
import { ReadableContent } from '../../reader/readable-content.js';
import { FormatterAdapter } from '../../formatter/formatter.adapter.js';

export const SECTION_GENERATOR_ADAPTER_IDENTIFIER = Symbol(
  'SectionGeneratorAdapter'
);

export enum SectionIdentifier {
  Header = 'header', // Title and logo
  Badges = 'badges', // Shields.io, marketplace, pipeline badges
  Overview = 'overview', // One-sentence value proposition
  Usage = 'usage', // Quickstart / usage examples
  Inputs = 'inputs', // Inputs / parameters
  Secrets = 'secrets', // secrets / environment variables
  Outputs = 'outputs', // Outputs / artefacts
  Examples = 'examples', // Usage examples
  Contributing = 'contributing', // Dev workflow & how to help
  Security = 'security', // Vulnerability disclosure policy
  License = 'license', // SPDX licence block
  Generated = 'generated', // Generated by CI Dokumentor attribution
}

export type SectionOptions = Record<string, unknown>;

export type SectionOptionsDescriptors<Options extends SectionOptions = SectionOptions> = Record<keyof Options, OptionDescriptor>;

/**
 * Payload object for section generation
 */
export interface SectionGenerationPayload<TManifest> {
  formatterAdapter: FormatterAdapter;
  manifest: TManifest;
  repositoryProvider: RepositoryProvider;
  destination: string;
}

/**
 * Enhanced interface for section generators that can inject CLI options
 */
export interface SectionGeneratorAdapter<TManifest, Options extends SectionOptions = SectionOptions> {
  getSectionIdentifier(): SectionIdentifier;

  /**
   * Generate the section content using a structured payload object
   */
  generateSection(payload: SectionGenerationPayload<TManifest>): Promise<ReadableContent>;

  /**
   * Provide CLI option descriptors specific to this section generator
   * Must return an object (can be empty if no options needed)
   */
  getSectionOptions(): SectionOptionsDescriptors<Options>;

  /**
   * Apply runtime option values to the section generator
   */
  setSectionOptions(options: Partial<Options>): void;
}


