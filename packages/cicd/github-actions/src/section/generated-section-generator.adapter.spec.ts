import { describe, it, expect } from 'vitest';
import { GeneratedSectionGenerator } from './generated-section-generator.adapter.js';
import { FormatterAdapter, MarkdownFormatterAdapter, Repository, SectionIdentifier } from '@ci-dokumentor/core';
import { GitHubAction } from '../github-actions-parser.js';
import { GitHubActionMockFactory } from '../../__tests__/github-action-mock.factory.js';
import { initTestContainer } from '@ci-dokumentor/repository-github';

describe('GeneratedSectionGenerator', () => {
  let formatterAdapter: FormatterAdapter;
  let generator: GeneratedSectionGenerator;
  let mockRepository: Repository;

  beforeEach(() => {
    const container = initTestContainer();
    formatterAdapter = container.get(MarkdownFormatterAdapter);

    generator = new GeneratedSectionGenerator();

    // Create mock repository
    mockRepository = {
      url: 'https://github.com/owner/repo',
      owner: 'owner',
      name: 'repo',
      fullName: 'owner/repo',
    } as Repository;
  });

  describe('getSectionIdentifier', () => {
    it('should return Generated section identifier', () => {
      // Act
      const result = generator.getSectionIdentifier();

      // Assert
      expect(result).toBe(SectionIdentifier.Generated);
    });
  });

  describe('generateSection', () => {
    it('should generate "generated by" section with link to CI Dokumentor', () => {
      // Arrange
      const manifest: GitHubAction = GitHubActionMockFactory.create();

      // Act
      const result = generator.generateSection(
        formatterAdapter,
        manifest,
        mockRepository
      );

      // Assert
      expect(result).toBeInstanceOf(Buffer);
      expect(result.toString()).toEqual(
        'This documentation was automatically generated by [CI Dokumentor](https://github.com/hoverkraft-tech/ci-dokumentor).\n'
      );
    });

    it('should generate the same section regardless of manifest type', () => {
      // Arrange
      const actionManifest: GitHubAction = GitHubActionMockFactory.create();
      const workflowManifest = {
        name: 'Test Workflow',
        on: 'push',
        jobs: {},
      };

      // Act
      const actionResult = generator.generateSection(
        formatterAdapter,
        actionManifest,
        mockRepository
      );
      const workflowResult = generator.generateSection(
        formatterAdapter,
        workflowManifest,
        mockRepository
      );

      // Assert
      expect(actionResult.toString()).toEqual(workflowResult.toString());
      expect(actionResult.toString()).toEqual(
        'This documentation was automatically generated by [CI Dokumentor](https://github.com/hoverkraft-tech/ci-dokumentor).\n'
      );
    });

    it('should generate the same section regardless of repository', () => {
      // Arrange
      const manifest: GitHubAction = GitHubActionMockFactory.create();
      const alternativeRepository = {
        ...mockRepository,
        owner: 'different-owner',
        name: 'different-repo',
      };

      // Act
      const result1 = generator.generateSection(
        formatterAdapter,
        manifest,
        mockRepository
      );
      const result2 = generator.generateSection(
        formatterAdapter,
        manifest,
        alternativeRepository
      );

      // Assert
      expect(result1.toString()).toEqual(result2.toString());
      expect(result1.toString()).toEqual(
        'This documentation was automatically generated by [CI Dokumentor](https://github.com/hoverkraft-tech/ci-dokumentor).\n'
      );
    });
  });
});