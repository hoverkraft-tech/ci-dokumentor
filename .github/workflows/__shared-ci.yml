name: Common Continuous Integration tasks

on:
  workflow_call:
    inputs:
      sign-images:
        required: true
        type: boolean
    outputs:
      image-tag:
        description: The image tag for the CI Dokumentor CLI
        value: ${{ fromJSON(jobs.docker.outputs.built-images).cli.tags[0] }}

permissions:
  actions: read
  contents: read
  packages: read
  security-events: write
  statuses: write
  id-token: write

jobs:
  linter:
    uses: hoverkraft-tech/ci-github-common/.github/workflows/linter.yml@b4883995e100e291a1fed68678d47a560328ed08 # 0.24.0
    with:
      linter-env: |
        FILTER_REGEX_EXCLUDE=dist/**/*
        VALIDATE_JSCPD=false
        VALIDATE_TYPESCRIPT_ES=false
        VALIDATE_TYPESCRIPT_PRETTIER=false
        VALIDATE_JAVASCRIPT_ES=false
        VALIDATE_TSX=false

  nodejs:
    uses: hoverkraft-tech/ci-github-nodejs/.github/workflows/continuous-integration.yml@1d00c9eb280acbee5df4b4a2087f786e66b13d87 # 0.14.1
    permissions:
      id-token: write
      security-events: write
      contents: read
    with:
      build: |
        {
          "commands": ["build"],
          "artifact": ["packages/docs/build"]
        }

  docker:
    needs: [linter, nodejs]
    uses: hoverkraft-tech/ci-github-container/.github/workflows/docker-build-images.yml@f9e149b6cdfa8443994994f10085691a57b8cf0e # 0.27.1
    permissions:
      contents: read
      issues: read
      packages: write
      pull-requests: read
      id-token: write
    secrets:
      oci-registry-password: ${{ secrets.GITHUB_TOKEN }}
    with:
      sign: ${{ inputs.sign-images }}
      images: |
        [
          {
            "name": "cli",
            "context": ".",
            "dockerfile": "docker/Dockerfile",
            "target": "production",
            "platforms": [
              "linux/amd64",
              "linux/arm64"
            ]
          }
        ]

  docker-test:
    needs: docker
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ fromJSON(needs.docker.outputs.built-images).cli.images[0] }}
    steps:
      # Test version command
      - run: docker run --rm "$IMAGE" --version

      # Test help command
      - run: docker run --rm "$IMAGE" --help

      # Test generate command
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - run: |
          docker run --rm \
          -v "$GITHUB_WORKSPACE:$GITHUB_WORKSPACE" \
          -u "$(id -u):$(id -g)" \
          -w "$GITHUB_WORKSPACE" \
          -e GITHUB_TOKEN \
          "$IMAGE" \
          generate \
          --source "action.yml" \
          --destination "packages/docs/content/integrations/github-action.md"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  action-test:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - id: generate-docs
        uses: ./
        with:
          version: ${{ fromJSON(needs.docker.outputs.built-images).cli.tags[0] }}
          source: action.yml
          destination: packages/docs/content/integrations/github-action.md
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          # Assert generate-docs action ouputs
          output_destination="${{ steps.generate-docs.outputs.destination }}"
          expected_output_destination="packages/docs/content/integrations/github-action.md"
          if [ "$output_destination" != "$expected_output_destination" ]; then
            echo "Error: Unexpected output destination"
            exit 1
          fi

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: github-action-documentation
          path: ${{ steps.generate-docs.outputs.destination }}
